name: CI/CD - Build, Scan, Push, Terraform

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write 
      contents: read       

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

    
      - name: üì¶ Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: ‚úÖ Run unit tests (backend)
        run: |
          cd backend
          npm test || echo "No tests found"

      - name: üßπ Run linting (backend)
        run: |
          cd backend
          npm install eslint --save-dev
          npx eslint . || echo "Lint warnings found"

      - name: üì¶ Install frontend dependencies
        run: |
          cd frontend
          npm install || echo "No package.json found - skipping npm install"

      - name: ‚úÖ Run unit tests (frontend)
        run: |
          cd frontend
          npm test || echo "No tests found"

      - name: üßπ Run linting (frontend)
        run: |
          cd frontend
          npm install eslint --save-dev
          npx eslint . || echo "Lint warnings found"

     
      - name: üê≥ Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üêô Log in to GHCR
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: üèóÔ∏è Build Docker images
        run: |
          VERSION=${GITHUB_SHA::7}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION ./backend
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-backend:$VERSION
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-backend:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION ./frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-frontend:$VERSION
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-frontend:latest

      - name: üîç Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: üîç Trivy Scan Backend Image
        run: |
          VERSION=${GITHUB_SHA::7}
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION

      - name: üîç Trivy Scan Frontend Image
        run: |
          VERSION=${GITHUB_SHA::7}
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION

      - name: üöÄ Push Docker Images
        if: success()
        run: |
          VERSION=${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:latest

          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-backend:$VERSION
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-backend:latest
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-frontend:$VERSION
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-frontend:latest

      # Terraform Deployment
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::545209303902:role/GitHubActions-Terraform-Role
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
