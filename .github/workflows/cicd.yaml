name: CI/CD - Build and Push

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üì¶ Install backend dependencies
        run: |
          cd backend
          npm install

      - name: ‚úÖ Run unit tests (backend)
        run: |
          cd backend
          npm test || echo "No tests found"

      - name: üßπ Run linting (backend)
        run: |
          cd backend
          npm install eslint --save-dev
          npx eslint . || echo "Lint warnings found"

   
      - name: üì¶ Install frontend dependencies
        run: |
          cd frontend
          npm install || echo "No package.json found - skipping npm install"

      - name: ‚úÖ Run unit tests (frontend)
        run: |
          cd frontend
          npm test || echo "No tests found"

      - name: üßπ Run linting (frontend)
        run: |
          cd frontend
          npm install eslint --save-dev
          npx eslint . || echo "Lint warnings found"

   
      - name: üê≥ Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üêô Log in to GHCR
        run: echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

     
      - name: üèóÔ∏è Build Docker images
        run: |
          VERSION=${GITHUB_SHA::7}
          
          # Backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION ./backend
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-backend:$VERSION
          
          # Frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION ./frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-frontend:$VERSION

      - name: üîç Install Trivy
        uses: aquasecurity/trivy-action@0.16.1
        with:
          scan-type: image
          severity: CRITICAL,HIGH
          exit-code: '1'
          ignore-unfixed: true
          image-ref: ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:${{ github.sha }}

      - name: üîç Scan Backend Image
        run: |
          VERSION=${GITHUB_SHA::7}
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION

      - name: üîç Scan Frontend Image
        run: |
          VERSION=${GITHUB_SHA::7}
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION

    
      - name: üöÄ Push to Docker Hub
        run: |
          VERSION=${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_USERNAME }}/localgallery-backend:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/localgallery-frontend:$VERSION

      - name: üöÄ Push to GHCR
        run: |
          VERSION=${GITHUB_SHA::7}
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-backend:$VERSION
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/localgallery-frontend:$VERSION
